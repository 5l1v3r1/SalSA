"""
Generates report from alerts generated by rules
"""
import os
import sys
import json
import hashlib
import datetime
import argparse

import pe
import rules

# import all specified rules
for r in rules.__all__:
  __import__('rules.' + r)

BANNER = """
*******************************************************************************
Static Malware Analysis v2.0
*******************************************************************************

# view help:
python main.py -h

# parse a file and generate a json file of alerts
python main.py -f malware.exe -o json

# parse a directory of files and generate a combined html file of alerts
python main.py -d . -o html
*******************************************************************************
"""

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>{title}</title>
</head>
<body style="font-family: monospace; font-size: 1.75em; color: #17202a">
  <div style="margin-right: auto; margin-left: auto;">
    {alerts}
  </div>
</body>
</html>
"""


def sha256_checksum(filename, block_size=1024):
  """ used to get the sha256 hash of a file for reporting """
  sha256 = hashlib.sha256()
  with open(filename, 'rb') as f:
    for b in iter(lambda: f.read(block_size), b''):
      sha256.update(b)
  return sha256.hexdigest()


if __name__ == '__main__':
  # parse user arguments
  parser = argparse.ArgumentParser(usage=BANNER)
  parser.add_argument('-f', dest='file',      help='file to parse',                                  type=str)
  parser.add_argument('-d', dest='directory', help='directory of files to parse',                    type=str)
  parser.add_argument('-o', dest='output',    help='desired output report format (json is default)', choices=['json','html'], default='json')
  args = parser.parse_args()
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # parse each file specified
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  pedata = []
  if args.file and os.path.isfile(args.file):
    print('[-] parsing file {0} ...'.format(args.file))
    pedata.append({
      'filename': os.path.basename(args.file),
      'data': pe.PE(args.file, True),
      'sha256': sha256_checksum(args.file),
    })
  elif args.directory:
    for f in os.listdir(args.directory):
      path = os.path.join(args.directory, f)
      if os.path.isfile(path):
        print('[-] parsing file {0} ...'.format(path))
        pedata.append({
          'filename': f,
          'data': pe.PE(path, True),
          'sha256': sha256_checksum(path),
        })
  else:
    print('[-] ERROR: no files specified for parsing.')
    quit()
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # applying rules
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  print('[-] applying rules ...')
  for obj in pedata:
    alerts = []
    for r in rules.__all__:
      alerts.extend(sys.modules['rules.' + r].run(obj['data']))
    obj['data'] = alerts
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # generate output
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  filename = 'salsa_report_{0}'.format(datetime.datetime.now().strftime('%b-%d-%Y_%Hh-%Mm-%Ss'))
  if args.output == 'json':
    print('[-] generating report {0}.json ...'.format(filename))
    with open(filename + '.json', 'w') as f:
      json.dump({'files': pedata}, f, indent=2, separators=[',',': '])
  elif args.output == 'html':
    print('[-] generating report {0}.html ...'.format(filename))
    # parse each file's results
    html = ''
    for f in pedata:
      html += '<h2 style="color: #c0392b;">{0}</h2>'.format(f['filename'])
      html += '<p>sha256sum: {0}</p>'.format(f['sha256'])
      html += '<hr>'
      # parse alerts for this file
      for d in f['data']:
        html += '<div style="display: block; width: 66.6666666667%; margin-left: 16.6666666667%;">'
        html += '<h4 style="color: #d35400;">{0}</h4>'.format(d['title'])
        html += '<p>{0}</p>'.format(d['description'])
        if d['data']:
          html += '<ul style="list-style-type: square; color: #566573;">'
          for i in d['data']:
            html += '<li>{0}</li>'.format(i)
          html += '</ul>'
        if d['code']:
          html += '<pre style="background-color: #eaecee; color: #3498db">{0}</pre>'.format(d['code'])
        html += '</div>'
    with open(filename + '.html', 'w') as f:
      f.write(HTML_TEMPLATE.format(title=filename, alerts=html))
